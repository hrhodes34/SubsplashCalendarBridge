#!/usr/bin/env python3
"""
Create a sample CSV showing what's currently being extracted
"""

import csv
from datetime import datetime

# Sample of what your current scraper is extracting based on the test output
sample_extracted_data = [
    {
        "calendar": "Prayer",
        "extracted_text": "at 10:30 AMLifegroups throughout the weekSUNDAY MORNINGS:Blowing Rock School165 Morris St.",
        "parsed_title": "at 10:30 AMLifegroups throughout the weekSUNDAY MORNINGS:Blowing Rock School165",
        "parsed_date": "2025-08-09",  # Wrong - generated by fallback logic
        "parsed_time": "allday",
        "issue": "This is contact info/navigation text, not an event"
    },
    {
        "calendar": "Prayer", 
        "extracted_text": "NC 28605ContactMailing Address:P.O.",
        "parsed_title": "NC 28605ContactMailing Address:P.O.",
        "parsed_date": "2025-08-10",  # Wrong - generated by fallback logic
        "parsed_time": "allday",
        "issue": "This is address information, not an event"
    },
    {
        "calendar": "Prayer",
        "extracted_text": "NC 28607",
        "parsed_title": "NC 28607",
        "parsed_date": "2025-09-09",  # Wrong - generated by fallback logic
        "parsed_time": "allday", 
        "issue": "This is just a ZIP code, not an event"
    },
    {
        "calendar": "Prayer",
        "extracted_text": "Suite 12",
        "parsed_title": "Suite 12", 
        "parsed_date": "2025-09-10",  # Wrong - generated by fallback logic
        "parsed_time": "allday",
        "issue": "This is address info, not an event"
    },
    {
        "calendar": "Prayer",
        "extracted_text": "NC 28607Follow Uspowered by SnapPages",
        "parsed_title": "NC 28607Follow Uspowered by SnapPages",
        "parsed_date": "2025-10-09",  # Wrong - generated by fallback logic 
        "parsed_time": "allday",
        "issue": "This is footer/copyright text, not an event"
    }
]

def create_sample_csv():
    """Create CSV showing the current problematic extraction"""
    csv_filename = f"current_extraction_issues_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['calendar', 'extracted_text', 'parsed_title', 'parsed_date', 'parsed_time', 'issue']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for row in sample_extracted_data:
            writer.writerow(row)
    
    print(f"âœ… Created sample CSV: {csv_filename}")
    print(f"ðŸ“Š This shows what your current scraper is extracting (which is wrong)")
    print(f"ðŸ’¡ The real issue: Your URLs point to static pages, not calendar feeds")
    
    return csv_filename

if __name__ == "__main__":
    create_sample_csv()
